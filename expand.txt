#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::{thread::sleep, time::Duration};
use rusqlite::{Connection, Result};
struct Person {
    id: i32,
    name: String,
    data: Option<Vec<u8>>,
}
#[automatically_derived]
impl ::core::fmt::Debug for Person {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field3_finish(
            f,
            "Person",
            "id",
            &&self.id,
            "name",
            &&self.name,
            "data",
            &&self.data,
        )
    }
}
fn main() -> Result<()> {
    let conn = Connection::open_in_memory()?;
    conn.execute(
        "CREATE TABLE person (
            id    INTEGER PRIMARY KEY,
            name  TEXT NOT NULL,
            data  BLOB
        )",
        (),
    )?;
    let me = Person {
        id: 0,
        name: "Steven".to_string(),
        data: None,
    };
    conn.execute(
        "INSERT INTO person (name, data) VALUES (?1, ?2)",
        (&me.name, &me.data),
    )?;
    loop {
        let mut stmt = conn.prepare("SELECT id, name, data FROM person")?;
        let person_iter = stmt.query_map([], |row| {
            Ok(Person {
                id: row.get(0)?,
                name: row.get(1)?,
                data: row.get(2)?,
            })
        })?;
        for person in person_iter {
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["Found person ", "\n"],
                    &[::core::fmt::ArgumentV1::new_debug(&person.unwrap())],
                ));
            };
        }
        sleep(Duration::from_millis(1000));
    }
    Ok(())
}
